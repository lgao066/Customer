// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Customer.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Customer")]
    public partial class CustomerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Customer.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Customer", "  As a program officer\r\n  In order to sign up a customer successfully\r\n  I want t" +
                    "o be able to fill the sign-up form with details", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Filling the sign-up form with details")]
        [NUnit.Framework.CategoryAttribute("ui")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        public void FillingTheSign_UpFormWithDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "ui",
                    "smoke"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filling the sign-up form with details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  testRunner.Given("I am on the sign-up page as a \"program officer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.And("I want to sign up a customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "BusinessEntityName",
                            "Rhipe Limited"});
                table1.AddRow(new string[] {
                            "LegalEntityId",
                            "Doe"});
                table1.AddRow(new string[] {
                            "AddrLine1",
                            "Unit 1"});
                table1.AddRow(new string[] {
                            "AddrLine2",
                            "23 abc Road"});
                table1.AddRow(new string[] {
                            "AddrLine3",
                            "xyz"});
                table1.AddRow(new string[] {
                            "City",
                            "Melbourne"});
                table1.AddRow(new string[] {
                            "State",
                            "VIC"});
                table1.AddRow(new string[] {
                            "Country",
                            "Australia"});
                table1.AddRow(new string[] {
                            "PostCode",
                            "1234"});
                table1.AddRow(new string[] {
                            "MainPhone",
                            "0472000000"});
                table1.AddRow(new string[] {
                            "Fax",
                            "0472000000"});
                table1.AddRow(new string[] {
                            "Website",
                            "www.crayon.com"});
                table1.AddRow(new string[] {
                            "Email",
                            "abc.xyz@crayon.com"});
                table1.AddRow(new string[] {
                            "Source",
                            "Others (Please Specify)"});
                table1.AddRow(new string[] {
                            "OtherSource",
                            "Google"});
                table1.AddRow(new string[] {
                            "IndustryType",
                            "IT Consultants"});
                table1.AddRow(new string[] {
                            "DiffBillingAddr",
                            "No"});
                table1.AddRow(new string[] {
                            "PrimaryContactFirstName",
                            "Li"});
                table1.AddRow(new string[] {
                            "PrimaryContactLastName",
                            "Gao"});
                table1.AddRow(new string[] {
                            "PrimaryDirectPhone",
                            "0471000000"});
                table1.AddRow(new string[] {
                            "PrimaryJobTitle",
                            "SDET"});
                table1.AddRow(new string[] {
                            "PrimaryEmail",
                            "li.gao@crayon.com"});
                table1.AddRow(new string[] {
                            "UseSameContact",
                            "Yes"});
#line 10
  testRunner.When("I enter the following details:", ((string)(null)), table1, "When ");
#line hidden
#line 35
  testRunner.Then("I should sign up a customer successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
